### PASO 6 - Creación de fórmula

import pandas as pd
import numpy as np
import os
from scipy.stats.stats import pearsonr
import statsmodels
import seaborn as sns
import statsmodels.formula.api as smf
from sklearn.feature_selection import RFE
from sklearn.svm import SVR
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
from statsmodels.stats.outliers_influence import variance_inflation_factor
import warnings
warnings.filterwarnings('ignore') 

def analysis_industria(industria):
    #Leemos el archivo excel de la industria 'Healthcare'.
    ruta = "C:/Users/carlos.guisado/Documents/Master/Master Kschool/TFM/Industrias/"
    df = pd.read_excel(ruta + industria)
    punto = industria.index('.')
    nombre_industria = industria[:punto]
    print("Vamos a analizar la industria: " + nombre_industria + ".")
    
    #Borramos aquellas columnas de las cuales no tenemos ningún dato. 
    #Esto lo hacemos porque en el dataset vienen variables financieras las cuales no se estudian en todas las industrias.
    df = df.dropna(axis = 1, how ="all")
    df = df.dropna(axis = 1, how ="all")
    df = df.drop(['TRBC Industry Group'], axis = 1)
    
    
    #Empresas que vamos a analizar
    df_groupby = df.groupby("Company Name")
    print("En esta industria, analizaremos un total de " + str(len(df_groupby)) + " empresas que cotizan en el mercado bursátil.")
    print()
    
    #Dimensiones y ratios a analizar:
    df_ = df
    #Limpieza de datos de los Ratios
    df = df.drop(['Company Name','Field Name'], axis = 1)
    df = df.dropna(axis = 0, how = "all")
    Ratios = df
    #Limpieza de datos de los Ratios
    print("El dataset en cuestión tiene unas dimensiones de: " + str(df_.shape) + " , ya que contamos con el histórico financiero de las empresas a analizar.") 
    print()
    print("El número total de Ratios a analizar en esta industria es de :" + str(df_.shape[1]))
    print()
    
    #Análisis Industria del año 2019:
    #Guardamos la variable final para estudiarla junto con la empresa que queramos
    #Reemplazamos los valores nulos por la media del total del año 2019
    df_analysis_2019 = df_
    df_analysis_2019 = df_analysis_2019[df_analysis_2019["Field Name"].str.contains("2019")]
    #CDefinimos variable con una lista de las columnas
    col = df_analysis_2019.columns.values.tolist()
    #Definimos los filtros que no queremos en el dataset
    df_analysis_2019 = df_analysis_2019.drop(['Company Name','Field Name'], axis = 1)
    #Reemplazamos valores nulos por la media
    cols = df_analysis_2019.columns.tolist()
    for i in cols:
        df_analysis_2019[i] = df_analysis_2019[i].fillna(df_analysis_2019[i].mean())
    df_analysis_2019 = df_analysis_2019.describe()
    df_analysis_2019 = df_analysis_2019[1:]
    df_2019_industria = pd.DataFrame(df_analysis_2019.iloc[0])
    df_2019_industria = df_2019_industria.transpose().rename(index={'mean': "2019"})
    df_2019_industria
    
    #Análisis Industria
    #Reemplazamos los valores nulos por la media del total y sacamos graficos de cómo ha ido evolucionando cada ratio.
    df_analysis = df_
    df_rt = pd.DataFrame()
    for i in range (2010,2020):
        df_analysis = df_[df_["Field Name"].str.endswith(str(i))]
        col = df_analysis.columns.values.tolist()
        df_analysis = df_analysis.drop(['Company Name','Field Name'], axis = 1)
        cols = df_analysis.columns.tolist()
        #Se reemplazan los valores nulos por la media
        for x in cols:
            df_analysis[x] = df_analysis[x].fillna(df_analysis[x].mean())
        #Calculamos el porcentaje de valores nulos por columna, y borramos aquellas columnas con más de un 12%
        total = df_analysis.isnull().sum().sort_values(ascending = False)
        percent = (df_analysis.isnull().sum() / df_analysis.isnull().count()).sort_values(ascending = False)
        missing_data = pd.concat([total, percent], axis = 1, keys = ['Total', 'Percent'])
        df_analysis = df_analysis.drop((missing_data[missing_data['Percent'] > 0.12]).index,1)
        #Se sacan los datos estadísticos
        df_analysis = pd.DataFrame(df_analysis.describe())
        df_analysis = df_analysis[1:]
        df_analysis = pd.DataFrame(df_analysis.iloc[0])
        df_analysis = df_analysis.transpose().rename(index={'mean': i})

        #Cambiar mean por la i
        df_rt = pd.concat([df_rt, df_analysis], axis = 0)
    
    df_rt
    
    #Representación gráfica con plots
    print("Ahora vamos a ver, en forma gráfica, como han ido evolucionando la media de estos ratios a lo largo de los últimos años.")
    print()       
    cols = df_rt.columns.values.tolist()
    for i in range(0,len(df_rt.columns)):
        df_rt[cols[i]].plot()
        plt.xlabel("Años")
        plt.ylabel("Valor Medio")
        plt.title(str(df_rt[cols[i]].name))
        print(plt.show())
    
    #VIF
    #Calcularemos el Factor de Inflación de Varianza para cada una de los ratios, con el fin de eliminar de nuestra ecuación
    #aquellos que ofrezcan la misma información, con el objetivo de crear un modelo acertado.
    corr = Ratios.corr()
    Ratios_vif = Ratios
    cols = Ratios_vif.columns.tolist()
    for i in cols:
        Ratios_vif[i] = Ratios_vif[i].fillna(Ratios_vif[i].mean())

    def calculate_vif(Ratios_vif):
        vif = pd.DataFrame()
        vif["Ratios"] = Ratios_vif.columns
        vif["VIF"] = [variance_inflation_factor(Ratios_vif.values, i) for i in range(Ratios_vif.shape[1])]    
        return(vif)
    vif = calculate_vif(Ratios_vif)
    while vif['VIF'][vif['VIF'] > 7].any():
        remove = vif.sort_values('VIF',ascending=0)['Ratios'][:1]
        Ratios_vif.drop(remove,axis=1,inplace=True)
        vif = calculate_vif(Ratios_vif)
    vif
    

    data = corr[['Market Capitalization']].sort_values(by = 'Market Capitalization',ascending = False)
    data_corr = data["Market Capitalization"]
    data_corr= data_corr.to_frame()
    data_corr["Distance"] = data_corr["Market Capitalization"]
    for i in range(0,len(data_corr)):
        if data_corr["Distance"][i] <0:
            data_corr["Distance"][i] = abs(data_corr["Distance"][i])
            
    data_ = data_corr.sort_values("Distance", ascending = False)
    data_ = data_.iloc[0:10]
    
    #Análisis de la correlación de los ratios
    ratios = corr
    Ratios_corr = ratios[[data_.iloc[0].name, data_.iloc[1].name, data_.iloc[2].name, data_.iloc[3].name, data_.iloc[4].name, data_.iloc[5].name, data_.iloc[6].name, data_.iloc[7].name]]
    filas = Ratios_corr.index.values
    columnas = Ratios_corr.columns.values
    result = [columnas for columnas in columnas if columnas in filas]
    Ratios_corr[result].loc[result]
    
    # Matriz de correlación
    corrmat = Ratios_corr.corr()
    k = 8 # Número de variables.
    cols = corrmat.nlargest(k, 'Market Capitalization')['Market Capitalization'].index
    cm = np.corrcoef(Ratios_corr[cols].values.T)
    sns.set(font_scale = 1)
    hm = sns.heatmap(cm, cbar = True, annot = True, square = True, fmt = '.2f', annot_kws = {'size': 12}, yticklabels = cols.values, xticklabels = cols.values)
    print("La matriz de correlación entre las variables es la siguiente: ")
    print()
    print(plt.show())
    
    lista = []
    for i in range(1,len(data_)):
        lista.append(data_.iloc[i].name)
    print("Las variables financieras con mayor correlación con respecto a la varianza en su cotización en la industria " + nombre_industria  + " son las siguientes: ")
    print()
    for x in lista:
        print(x)
    
    
#Prueba
analysis("Healthcare.xlsx")

#Si queremos hacer un análisis para cada una de las empresas, podemos hacerlo con este bucle.
#Definimos variable para recorrer los datos de una carpeta específica.
ruta = "C:/Users/carlos.guisado/Documents/Master/Master Kschool/TFM/Industrias/"
lista_industrias = os.listdir(r"C:/Users/carlos.guisado/Documents/Master/Master Kschool/TFM/Industrias/")
lista_industrias[0]

for industria in range(0,len(lista_industrias)):
    analysis(lista_industrias[industria])
    
    
    
#Análisis Empresa
#Creamos un diccionario con el nombre de las industrias y cómo se llama su documento.
diccionario = {'Healthcare Equipment & Supplies' : 'Healthcare.xlsx', 'Metals & Mining' : 'Metals_Mining.xlsx', 'Passenger Transportation Services': 'Passenger_Transportation_Services.xlsx',
               'Specialty Retailers' : 'Specialty_Retailers.xlsx',  'Computers, Phones & Household Electronics' : 'Computers_Phones_Household_Electronics.xlsx',
               'Freight & Logistics Services' : 'Freight_Logistics_Services.xlsx' , 'Pharmaceuticals' : 'Pharmaceuticals.xlsx',
               'Professional & Commercial Services' : 'Professional_Commercial_Services.xlsx', 'Food & Tobacco' : 'Food_Tobacco.xlsx' , 
               'Software & IT Services' : 'Software_IT_Services.xlsx' , 'Multiline Utilities' : 'Multiline_Utilities.xlsx', 'Electric Utilities & IPPs' :'Electric_Utilities_IPPs.xlsx',
               'Insurance' : 'Insurance.xlsx' , 'Machinery, Tools, Heavy Vehicles, Trains & Ships' : 'Machinery.xlsx' , 'Chemicals' : 'Chemicals.xlsx' , 
               'Residential & Commercial REITs' : 'Residential_Commercial_REITs.xlsx', 'Aerospace & Defense' : 'Aerospace_Defense.xlsx' , 
               'Investment Banking & Investment Services' : 'Investment_Banking_Investment_Services.xlsx', 'Communications & Networking' : 'Communications.xlsx' ,
               'Semiconductors & Semiconductor Equipment' : 'Semiconductors.xlsx', 'Diversified Retail' : 'Diversified_Retail.xlsx' , 'Specialty Retailers' : 'Specialty_Retailers.xlsx' , 
               'Healthcare Providers & Services': 'Healthcare_Providers_Services.xlsx' , 'Oil & Gas' : 'Oil_Gas.xlsx' , 'Electronic Equipment & Parts' : 'Electronic_Equipment_Parts.xlsx' ,
               'Containers & Packaging' : 'Containers_Packaging.xlsx' , 'Water & Related Utilities' : 'Water_Related_Utilities.xlsx', 'Banking Services':'Banking_Services.xlsx', 'Homebuilding & Construction Supplies' : 'Homebuilding_Construction_Supplies.xlsx',
               'Leisure Products' : 'Leisure_Products.xlsx' , 'Textiles & Apparel' : 'Textiles_Apparel.xlsx' , 'Beverages':'Beverages.xlsx', 'Coal' : "Coal.xlsx" , 
               'Automobiles & Auto Parts' : 'Automobiles_Auto_Parts.xlsx' , 'Food & Drug Retailing' : 'Food_Drug_Retailing.xlsx' , 'Media & Publishing' : 'Media_Publishing.xlsx' , 
               'Hotels & Entertainment Services' : 'Hotels_Entertainment_Services.xlsx' , 'Personal & Household Products & Services' : 'Personal_Household_PS.xlsx' , 
               'Freight & Logistics Services' : 'Freight_Logistics_Services.xlsx', 'Telecommunications Services' : 'Telecommunications_Services.xlsx' , 
               'Oil & Gas Related Equipment and Services' : 'Oil_Gas_Equipment_Services.xlsx' , 'Industrial Conglomerates' : 'Industrial_Conglomerates.xlsx' , 
               'Biotechnology & Medical Research' : 'Biotechnology_Medical_Research.xlsx' , 'Diversified Industrial Goods Wholesalers': 'Diversified_Industrial_Goods.xlsx',
               'Real Estate Operations' : 'Real_Estate_Operations.xlsx' , 'Construction & Engineering' : 'Construction_Engineering.xlsx', 'Paper & Forest Products Goods': 'Paper_Forest_Products.xlsx',
               'Construction Materials' : 'Construction_Materials.xlsx' , 'Household Goods': 'Household_Goods.xlsx', 'Natural Gas Utilities' : 'Natural_Gas_Utilities.xlsx',
               'Office Equipment' : 'Office_Equipment.xlsx'}

def analysis_empresa(empresa):
    #Cargamos los datos de nuestro Dataset
    df = pd.read_excel('df.xlsx')
    
    #Borramos aquellas columnas que no tengan ningún dato
    df = df.dropna(axis = 1, how = "all")
    
    #Creamos variable con todos los nombres de las empresas que vamos a analizar
    lista_empresas = df["Company Name"].unique().tolist()
    
    #Creamos un nuevo df con los datos de la empresa que queremos buscar.
    df_analysis_empresa = df[df["Company Name"].str.contains(empresa)]
    industria_empresa = df_analysis_empresa["TRBC Industry Group"].iloc[0]
    industria_empresa = diccionario[industria_empresa]

    #Llamamos a otra función para sacar los datos de la industria a la que pertenece la empresa que queremos analizar
    print("ANÁLISIS DE LA EMPRESA : " + empresa)
    print()
    print("Antes de comenzar a examinar la empresa es cuestión, tenemos que analizar su entorno, con el fin de conocer cuáles son los ratios con mayor relevancia dentro de la industria a la que pertenece y hacer una compración con la media de mercado.")
    print()
    analysis_industria(industria_empresa)
    
analysis_empresa("Agilent")
