### PASO 3: LIMPIEZA DE DATOS
En este paso seleccionaremos una de las industrias para examinarla y realizar la limpieza de datos. 
El objetivo consistirá en construir, finalmente, una fórmula la cual pueda limpiar todos los archivos de las diferentes industrias para su posterior estudio.

import pandas as pd
import numpy as np

#Leemos el archivo excel de la industria 'Healthcare'.
ruta = "C:/Users/carlos.guisado/Documents/Master/Master Kschool/TFM/Industrias/"
df = pd.read_excel(ruta + "Healthcare.xlsx")

#Comprobamos que se ha cargado correctamente.
df.head()

#Borramos aquellas columnas de las cuales no tenemos ningún dato. 
#Esto lo hacemos porque en el dataset vienen variables financieras las cuales no se estudian en todas las industrias.
df_ = df.dropna(axis = 1, how = "all")
df_.shape

#Creamos una variable númerica que nos de el 25% de la longitud del dataset
porcent = 25%len(df_)
#Creamos un nuevo DataFrame en el que se pueda ver el número de variables nulas por fila del Dataset df_
cols_null = pd.DataFrame(df_.isnull().sum())
#Borramos todas aquellas variables en las que el 75% de las empresas tengan valores nulos.
cols_null = cols_null[cols_null < porcent]
#Creamos el dataset de las No Nulas
cols_not_null = cols_null.dropna()
cols_not_null = cols_not_null.transpose()
#Creamos una nueva variable con una lista de las variables financieras que analizaremos en esta industria
variables_financieras = cols_not_null.columns.values.tolist()
#Nos quedamos en el Dataset df_ únicamente con las columnas de la lista "variables_financieras"
columns = df_.columns.values.tolist()
sublist = [x for x in columns if x in variables_financieras]
df_ = df_[sublist]
#Borramos la columna "Country" y "Reporting Unit" ya que no la vamos a utilizar.
df_ = df_.drop(['Country', 'Reporting Unit'], axis = 1)

#Añadimos una columna a nuestro DataFrame. Variable financiera utilizada en la valoración de empresas, en la que
#se divide el valor de la empresa (market cap) por su EBITDA.
df_["EV/EBITDA"] = df_["Market Capitalization"] / df_["EBITDA"]



### PASO 4a: CÁLCULO DE CORRELACIONES ENTRE VARIABLES
El objetivo de este paso es el de crear un dataframe en el que definamos las diferentes variables financieras que queremos utilizar en nuestro modelo.
Algunas de estas variables vienen dadas en el dataset y otras tendremos que calcularlas.
Una vez ya tenemos el nuevo dataset, pasaremos a calcular cómo han variado los ratios de un informe a otro.

import numpy as np
import pandas as pd
from scipy.stats.stats import pearsonr

#Primero vamos a crear un DataFrame con el nombre de las distintas compañías de la industria
df_ratios = pd.DataFrame(df_["Company Name"])

#Ahora iremos definiendo diferentes variables financieras. Debido a que analizaremos distintas industrias, y para evitar que
#se produzca un error en python, iremos viendo si existen los ratios demandados y añadiéndolo a df_ratios en caso positivo.

#Ahora iremos definiendo diferentes variables financieras. Debido a que analizaremos distintas industrias, y para evitar que
#se produzca un error en python, iremos viendo si existen los ratios demandados y añadiéndolo a df_ratios en caso positivo.

#Date
try:
    Date = pd.DataFrame(data = df_["Field Name"])
    df_ratios = pd.concat([df_ratios, Date], axis = 1)
except KeyError:
    pass

#Market Cap
try:
    Mkt_Cap = pd.DataFrame(data = df_["Market Capitalization"])
    df_ratios = pd.concat([df_ratios, Mkt_Cap], axis = 1)
except KeyError:
    pass

#Ratio Book Value per share:
try:
    BookValue_per_share = pd.DataFrame((df_["Price To Book Value per Share - Issue"]*100) / df_["Price Close (End Of Period)"])
    BookValue_per_share.columns = ["BookValue_per_share"]
    df_ratios = pd.concat([df_ratios, BookValue_per_share], axis = 1)
except KeyError:
    pass
#Ratio EV_EBITDA:
try:
    EV_EBITDA = pd.DataFrame(data = df_["EV/EBITDA"])
    df_ratios = pd.concat([df_ratios, EV_EBITDA], axis = 1)
except KeyError:
    pass
#Ratio PE_Growth_Ratio:
try:
    PE_Growth_Ratio = pd.DataFrame(df_["PE Growth Ratio"])
    df_ratios = pd.concat([df_ratios, PE_Growth_Ratio], axis = 1)
except KeyError:
    pass
#Ratio Pretax ROA:
try:
    Pretax_ROA = pd.DataFrame(df_["Pretax ROA"])
    df_ratios = pd.concat([df_ratios, Pretax_ROA], axis = 1)
except KeyError:
    pass
#Ratio Pretax ROE:
try:
    Pretax_ROE = pd.DataFrame(df_["Pretax ROE"])
    df_ratios = pd.concat([df_ratios, Pretax_ROE], axis = 1)
except KeyError:
    pass
#Ratio ROA:
try:
    ROA = pd.DataFrame(df_["Return On Avg Tot Assets"])
    df_ratios = pd.concat([df_ratios, ROA], axis = 1)
except KeyError:
    pass
#Ratio Pretax ROE:
try:
    ROE = pd.DataFrame(df_["Return On Avg Com Eq"])
    df_ratios = pd.concat([df_ratios, ROE], axis = 1)
except KeyError:
    pass
#Ratio Pretax ROIC:
try:
    ROIC = pd.DataFrame(df_["Return On Invst Cap"])
    df_ratios = pd.concat([df_ratios, ROIC], axis = 1)
except KeyError:
    pass
#Ratio Debt on Assets:
try:
    Debt_on_Assets = pd.DataFrame(df_["Tot Debt Pct of Tot Assets"])
    df_ratios = pd.concat([df_ratios, Debt_on_Assets], axis = 1)
except KeyError:
    pass
#Ratio Debt on Equity:
try:
    Debt_on_Equity = pd.DataFrame(df_["Tot Debt Pct of Tot Eq"])
    df_ratios = pd.concat([df_ratios, Debt_on_Equity], axis = 1)
except KeyError:
    pass
#Ratio Debt on Capital:
try:
    Debt_on_Capital = pd.DataFrame(df_["Tot Debt Pct of Tot Cap"])
    df_ratios = pd.concat([df_ratios, Debt_on_Capital], axis = 1)
except KeyError:
    pass
#Ratio Gross Profit:
try:
    Gross_Profit = pd.DataFrame(df_["Gross Profit Margin - %"])
    df_ratios = pd.concat([df_ratios, Gross_Profit], axis = 1)
except KeyError:
    pass
#Ratio EBITDA Margin:
try:
    EBITDA_Margin = pd.DataFrame(df_["EBITDA Margin - %"])
    df_ratios = pd.concat([df_ratios, EBITDA_Margin], axis = 1)
except KeyError:
    pass
#Ratio Operating Margin:
try:
    Operating_Margin = pd.DataFrame(df_["Operating Margin - %"])
    df_ratios = pd.concat([df_ratios, Operating_Margin], axis = 1)
except KeyError:
    pass
#Ratio Net Margin:
try:
    Net_Margin = pd.DataFrame(df_["Net Margin - %"])
    df_ratios = pd.concat([df_ratios, Net_Margin], axis = 1)
except KeyError:
    pass
#Ratio Quick_r:
try:
    Quick_Ratio = pd.DataFrame(df_["Quick Ratio"])
    df_ratios = pd.concat([df_ratios, Quick_Ratio], axis = 1)
except KeyError:
    pass
#Ratio Current_r:
try:
    Current_Ratio = pd.DataFrame(df_["Curr Ratio"])
    df_ratios = pd.concat([df_ratios, Current_Ratio], axis = 1)
except KeyError:
    pass
#Ratio FOCF_Yield:
try:
    FOCF_Yield = pd.DataFrame(df_["FOCF Yld"])
    df_ratios = pd.concat([df_ratios, FOCF_Yield], axis = 1)
except KeyError:
    pass
#Ratio Working Capital to Total Assets:
try:
    Working_Cap_to_Tot_Assets = pd.DataFrame(df_["Wkg Cap to Tot Assets"])
    df_ratios = pd.concat([df_ratios, Working_Cap_to_Tot_Assets], axis = 1)
except KeyError:
    pass
#Ratio Inventory Turnover:
try:
    Inventory_Turnover = pd.DataFrame(df_["Invnt Turnover"])
    df_ratios = pd.concat([df_ratios, Inventory_Turnover], axis = 1)
except KeyError:
    pass
#Ratio Average Inventory Days:
try:
    Average_Inventory_Days = pd.DataFrame(df_["Avg Invnt Days"])
    df_ratios = pd.concat([df_ratios, Average_Inventory_Days], axis = 1)
except KeyError:
    pass
#Ratio Price to Cash Flow per Share:
try:
    Price_to_Cash_Flow_per_Share = pd.DataFrame((df_["Price To Cash Flow per Share"]*100) / df_["Price Close (End Of Period)"])
    Price_to_Cash_Flow_per_Share.columns = ["Price_to_Cash_Flow_per_Share"]
    df_ratios = pd.concat([df_ratios, Price_to_Cash_Flow_per_Share], axis = 1)
except KeyError:
    pass
#Ratio Total Assets per Employee:
try:
    Tot_Assets_per_Employee = pd.DataFrame((df_["Tot Assets per Emp"] * 100) /df_["Tot Assets"])
    Tot_Assets_per_Employee.columns = ["Tot_Assets_per_Employee"]
    df_ratios = pd.concat([df_ratios, Tot_Assets_per_Employee], axis = 1)
except KeyError:
    pass
#Ratio Investment:
try:
    Investment_Ratio = pd.DataFrame(df_["Invst Ratio - %"])
    df_ratios = pd.concat([df_ratios, Investment_Ratio], axis = 1)
except KeyError:
    pass
#Ratio Efficiency_r:
try:
    Efficiency_Ratio = pd.DataFrame(df_["Efficiency Ratio - %"])
    df_ratios = pd.concat([df_ratios, Efficiency_Ratio], axis = 1)
except KeyError:
    pass
#Ratio Income Bef Taxes Margin:
try:
    Inc_Bef_Taxes_Margin = pd.DataFrame(df_["Inc Bef Taxes Margin - %"])
    df_ratios = pd.concat([df_ratios, Inc_Bef_Taxes_Margin], axis = 1)
except KeyError:
    pass
    
#Comprobamos que el DaraFrame df_ratios está correcto
df_ratios.columns.values

#Definimos una variable que será un array con el nombre de las compañías
companies = df_ratios["Company Name"]
companies = companies.unique()
companies[0]

#Creamos ahora una función la cual nos crea una lista donde vamos a calcular y añadir,
#en la columna dada, la variación porcentual de los ratios financieros.
def func(df,columnName):
    fechas = df["Field Name"].tolist()[::-1]
    listaValues = [None]*len(fechas)
    for i in range(1,len(fechas)):
        mayor = df[df['Field Name'] == fechas[i]][[columnName]].iloc[0].values[0]
        menor = df[df['Field Name'] == fechas[i-1]][[columnName]].iloc[0].values[0]
        value = (((mayor*100)/menor)/100)-1
        listaValues[i] = value
    df[columnName] = listaValues[::-1]
    return df

#Creamos un dataset en el cual iremos añadiendo las columnas que vamos calculando utilizando la función "func".
Ratios = df_ratios[["Company Name","Field Name"]]

#Calculamos, uno a uno, el porcentaje de cambio de cada una de las columnas. 

#Market Capitalization
try:
    MktCap = df_ratios[["Company Name","Field Name","Market Capitalization"]]
    MktCap_ratio = [None]*len(companies)
    for i in range(0,len(companies)):
        MktCap_ratio[i] = func(MktCap[MktCap["Company Name"]==companies[i]],"Market Capitalization")
    
    dfMktCap= MktCap_ratio[0]
    for i in range(1,len(MktCap_ratio)):
        dfMktCap = pd.concat([dfMktCap,MktCap_ratio[i]])
    Ratios = pd.concat([Ratios, dfMktCap], axis = 1)  
except KeyError:
    pass    

#BookValue per share:
try:
    Book_Value = df_ratios[["Company Name","Field Name","BookValue_per_share"]]
    BookValue_ratio = [None]*len(companies)
    for i in range(0,len(companies)):
        BookValue_ratio[i] = func(Book_Value[Book_Value["Company Name"]==companies[i]],"BookValue_per_share")
    dfBookValue= BookValue_ratio[0]
    for i in range(1,len(BookValue_ratio)):
        dfBookValue = pd.concat([dfBookValue,BookValue_ratio[i]])
    Ratios = pd.concat([Ratios, dfBookValue], axis = 1)
except KeyError:
    pass 

#EV/EBITDA
try:
    EV_EBITDA = df_ratios[["Company Name","Field Name","EV/EBITDA"]]
    EV_EBITDA_ratio = [None]*len(companies)
    for i in range(0,len(companies)):
        EV_EBITDA_ratio[i] = func(EV_EBITDA[EV_EBITDA["Company Name"]==companies[i]],"EV/EBITDA")
    dfEV_EBITDA= EV_EBITDA_ratio[0]
    
    for i in range(1,len(EV_EBITDA_ratio)):
        dfEV_EBITDA = pd.concat([dfEV_EBITDA,EV_EBITDA_ratio[i]])
    Ratios = pd.concat([Ratios, dfEV_EBITDA], axis = 1)
except KeyError:
    pass 

#PE Growth Ratio
try:
    PE_Growth = df_ratios[["Company Name","Field Name","PE Growth Ratio"]]
    PE_Growth_ratio = [None]*len(companies)
    for i in range(0,len(companies)):
        PE_Growth_ratio[i] = func(PE_Growth[PE_Growth["Company Name"]==companies[i]],"PE Growth Ratio")
        
    dfPE_Growth= PE_Growth_ratio[0]
    for i in range(1,len(PE_Growth_ratio)):
        dfPE_Growth = pd.concat([dfPE_Growth,PE_Growth_ratio[i]])
    Ratios = pd.concat([Ratios, dfPE_Growth], axis = 1)
    
except KeyError:
    pass  

#Pretax ROA
try:
    Pretax_ROA = df_ratios[["Company Name","Field Name","Pretax ROA"]]
    Pretax_ROA_ratio = [None]*len(companies)
    for i in range(0,len(companies)):
        Pretax_ROA_ratio[i] = func(Pretax_ROA[Pretax_ROA["Company Name"]==companies[i]],"Pretax ROA")
        
    dfPretax_ROA= Pretax_ROA_ratio[0]
    for i in range(1,len(Pretax_ROA_ratio)):
        dfPretax_ROE = pd.concat([dfPretax_ROA,Pretax_ROA_ratio[i]])
    Ratios = pd.concat([Ratios, dfPretax_ROA], axis = 1)  
except KeyError:
    pass    


#Pretax ROE
try:
    Pretax_ROE = df_ratios[["Company Name","Field Name","Pretax ROE"]]
    Pretax_ROE_ratio = [None]*len(companies)
    for i in range(0,len(companies)):
        Pretax_ROE_ratio[i] = func(Pretax_ROE[Pretax_ROE["Company Name"]==companies[i]],"Pretax ROE")

    dfPretax_ROE= Pretax_ROE_ratio[0]
    for i in range(1,len(Pretax_ROE_ratio)):
        dfPretax_ROE = pd.concat([dfPretax_ROE,Pretax_ROE_ratio[i]])
    Ratios = pd.concat([Ratios, dfPretax_ROE], axis = 1)
    
except KeyError:
    pass

#Return On Avg Tot Assets
try:
    ROA = df_ratios[["Company Name","Field Name","Return On Avg Tot Assets"]]
    ROA_ratio = [None]*len(companies)
    for i in range(0,len(companies)):
        ROA_ratio[i] = func(ROA[ROA["Company Name"]==companies[i]],"Return On Avg Tot Assets")
        
    dfROA= ROA_ratio[0]
    for i in range(1,len(ROA_ratio)):
        dfROA = pd.concat([dfROA,ROA_ratio[i]])
    Ratios = pd.concat([Ratios, dfROA], axis = 1)  
    
except KeyError:
    pass

#Return On Avg Com Eq
try:
    ROE = df_ratios[["Company Name","Field Name","Return On Avg Com Eq"]]
    ROE_ratio = [None]*len(companies)
    for i in range(0,len(companies)):
        ROE_ratio[i] = func(ROE[ROE["Company Name"]==companies[i]],"Return On Avg Com Eq")
        
    dfROE= ROE_ratio[0]
    for i in range(1,len(ROE_ratio)):
        dfROE = pd.concat([dfROE,ROE_ratio[i]])
    Ratios = pd.concat([Ratios, dfROE], axis = 1)   
    
except KeyError:
    pass

#Tot Debt Pct of Tot Assets
try:
    Debt_Assets = df_ratios[["Company Name","Field Name","Tot Debt Pct of Tot Assets"]]
    Debt_Assets_ratio = [None]*len(companies)
    for i in range(0,len(companies)):
        Debt_Assets_ratio[i] = func(Debt_Assets[Debt_Assets["Company Name"]==companies[i]],"Tot Debt Pct of Tot Assets")
        
    dfDebt_Assets= Debt_Assets_ratio[0]
    for i in range(1,len(Debt_Assets_ratio)):
        dfDebt_Assets = pd.concat([dfDebt_Assets,Debt_Assets_ratio[i]])
    Ratios = pd.concat([Ratios, dfDebt_Assets], axis = 1)   
except KeyError:
    pass

#Tot Debt Pct of Tot Eq
try:
    Debt_Eq = df_ratios[["Company Name","Field Name","Tot Debt Pct of Tot Eq"]]
    Debt_Eq_ratio = [None]*len(companies)
    for i in range(0,len(companies)):
        Debt_Eq_ratio[i] = func(Debt_Eq[Debt_Eq["Company Name"]==companies[i]],"Tot Debt Pct of Tot Eq")
        
    dfDebt_Eq= Debt_Eq_ratio[0]
    for i in range(1,len(Debt_Eq_ratio)):
        dfDebt_Eq = pd.concat([dfDebt_Eq,Debt_Eq_ratio[i]])
    Ratios = pd.concat([Ratios, dfDebt_Eq], axis = 1)  
    
except KeyError:
    pass

#Tot Debt Pct of Tot Cap
try:
    Debt_Cap = df_ratios[["Company Name","Field Name","Tot Debt Pct of Tot Cap"]]
    Debt_Cap_ratio = [None]*len(companies)
    for i in range(0,len(companies)):
        Debt_Cap_ratio[i] = func(Debt_Cap[Debt_Cap["Company Name"]==companies[i]],"Tot Debt Pct of Tot Cap")
        
    dfDebt_Cap= Debt_Cap_ratio[0]
    for i in range(1,len(Debt_Cap_ratio)):
        dfDebt_Cap = pd.concat([dfDebt_Cap,Debt_Cap_ratio[i]])
    Ratios = pd.concat([Ratios, dfDebt_Cap], axis = 1) 
    
except KeyError:
    pass

#Gross Profit Margin - %
try:
    Gross_Profit = df_ratios[["Company Name","Field Name","Gross Profit Margin - %"]]
    Gross_Profit_ratio = [None]*len(companies)
    for i in range(0,len(companies)):
        Gross_Profit_ratio[i] = func(Gross_Profit[Gross_Profit["Company Name"]==companies[i]],"Gross Profit Margin - %")
        
    dfGross_Profit= Gross_Profit_ratio[0]
    for i in range(1,len(Gross_Profit_ratio)):
        dfGross_Profit = pd.concat([dfGross_Profit,Gross_Profit_ratio[i]])
    Ratios = pd.concat([Ratios, dfGross_Profit], axis = 1)  
    
except KeyError:
    pass

#EBITDA Margin - %
try:
    EBITDA_Margin = df_ratios[["Company Name","Field Name","EBITDA Margin - %"]]
    EBITDA_Margin_ratio = [None]*len(companies)
    for i in range(0,len(companies)):
        EBITDA_Margin_ratio[i] = func(EBITDA_Margin[EBITDA_Margin["Company Name"]==companies[i]],"EBITDA Margin - %")
        
    dfEBITDA_Margin= EBITDA_Margin_ratio[0]
    for i in range(1,len(EBITDA_Margin_ratio)):
        dfEBITDA_Margin = pd.concat([dfEBITDA_Margin,EBITDA_Margin_ratio[i]])
    Ratios = pd.concat([Ratios, dfEBITDA_Margin], axis = 1)  
    
except KeyError:
    pass

#Operating Margin - %
try:
    Operating_Margin = df_ratios[["Company Name","Field Name","Operating Margin - %"]]
    Operating_Margin_ratio = [None]*len(companies)
    for i in range(0,len(companies)):
        Operating_Margin_ratio[i] = func(Operating_Margin[Operating_Margin["Company Name"]==companies[i]],"Operating Margin - %")

    dfOperating_Margin= Operating_Margin_ratio[0]
    for i in range(1,len(Operating_Margin_ratio)):
        dfOperating_Margin = pd.concat([dfOperating_Margin,Operating_Margin_ratio[i]])
    Ratios = pd.concat([Ratios, dfOperating_Margin], axis = 1) 
        
except KeyError:
    pass

#Net Margin - %
try:
    Net_Margin = df_ratios[["Company Name","Field Name","Net Margin - %"]]
    Net_Margin_ratio = [None]*len(companies)
    for i in range(0,len(companies)):
        Net_Margin_ratio[i] = func(Net_Margin[Net_Margin["Company Name"]==companies[i]],"Net Margin - %")
        
    dfNet_Margin= Net_Margin_ratio[0]
    for i in range(1,len(Net_Margin_ratio)):
        dfNet_Margin = pd.concat([dfNet_Margin,Net_Margin_ratio[i]])
    Ratios = pd.concat([Ratios, dfNet_Margin], axis = 1) 
    
except KeyError:
    pass

#Quick Ratio
try:
    Quick_R = df_ratios[["Company Name","Field Name","Quick Ratio"]]
    Quick_R_ratio = [None]*len(companies)
    for i in range(0,len(companies)):
        Quick_R_ratio[i] = func(Quick_R[Quick_R["Company Name"]==companies[i]],"Quick Ratio")
        
    dfQuick_R= Quick_R_ratio[0]
    for i in range(1,len(Quick_R_ratio)):
        dfQuick_R = pd.concat([dfQuick_R,Quick_R_ratio[i]])
    Ratios = pd.concat([Ratios, dfQuick_R], axis = 1) 
    
except KeyError:
    pass

#Curr Ratio
try:
    Curr_R = df_ratios[["Company Name","Field Name","Curr Ratio"]]
    Curr_R_ratio = [None]*len(companies)
    for i in range(0,len(companies)):
        Curr_R_ratio[i] = func(Curr_R[Curr_R["Company Name"]==companies[i]],"Curr Ratio")
        
    dfCurr_R= Curr_R_ratio[0]
    for i in range(1,len(Curr_R_ratio)):
        dfCurr_R = pd.concat([dfCurr_R,Curr_R_ratio[i]])
    Ratios = pd.concat([Ratios, dfCurr_R], axis = 1)
    
except KeyError:
    pass

#FOCF Yld
try:
    FOCF_Yld = df_ratios[["Company Name","Field Name","FOCF Yld"]]
    FOCF_Yld_ratio = [None]*len(companies)
    for i in range(0,len(companies)):
        FOCF_Yld_ratio[i] = func(FOCF_Yld[FOCF_Yld["Company Name"]==companies[i]],"FOCF Yld")
        
    dfFOCF_Yld= FOCF_Yld_ratio[0]
    for i in range(1,len(FOCF_Yld_ratio)):
        dfFOCF_Yld = pd.concat([dfFOCF_Yld,FOCF_Yld_ratio[i]])
    Ratios = pd.concat([Ratios, dfFOCF_Yld], axis = 1)
    
except KeyError:
    pass

#Wkg Cap to Tot Assets
try:
    WkgCap_Assets = df_ratios[["Company Name","Field Name","Wkg Cap to Tot Assets"]]
    WkgCap_Assets_ratio = [None]*len(companies)
    for i in range(0,len(companies)):
        WkgCap_Assets_ratio[i] = func(WkgCap_Assets[WkgCap_Assets["Company Name"]==companies[i]],"Wkg Cap to Tot Assets")
        
    dfWkgCap_Assets= WkgCap_Assets_ratio[0]
    for i in range(1,len(WkgCap_Assets_ratio)):
        dfWkgCap_Assets = pd.concat([dfWkgCap_Assets,WkgCap_Assets_ratio[i]])
    Ratios = pd.concat([Ratios, dfWkgCap_Assets], axis = 1)
    
except KeyError:
    pass

#Invnt Turnover
try:
    Invnt_Turnover = df_ratios[["Company Name","Field Name","Invnt Turnover"]]
    Invnt_Turnover_ratio = [None]*len(companies)
    for i in range(0,len(companies)):
        Invnt_Turnover_ratio[i] = func(Invnt_Turnover[Invnt_Turnover["Company Name"]==companies[i]],"Invnt Turnover")
        
    dfInvnt_Turnover= Invnt_Turnover_ratio[0]
    for i in range(1,len(Invnt_Turnover_ratio)):
        dfInvnt_Turnover = pd.concat([dfInvnt_Turnover,Invnt_Turnover_ratio[i]])
    Ratios = pd.concat([Ratios, dfInvnt_Turnover], axis = 1)
    
except KeyError:
    pass

#Avg Invnt Days
try:
    Avg_Invnt = df_ratios[["Company Name","Field Name","Avg Invnt Days"]]
    Avg_Invnt_ratio = [None]*len(companies)
    for i in range(0,len(companies)):
        Avg_Invnt_ratio[i] = func(Avg_Invnt[Avg_Invnt["Company Name"]==companies[i]],"Avg Invnt Days")

    dfAvg_Invnt= Avg_Invnt_ratio[0]
    for i in range(1,len(Avg_Invnt_ratio)):
        dfAvg_Invnt = pd.concat([dfAvg_Invnt,Avg_Invnt_ratio[i]])
    Ratios = pd.concat([Ratios, dfAvg_Invnt], axis = 1)
    
except KeyError:
    pass

#Tot_Assets_per_Employee
try:
    Assets_employee = df_ratios[["Company Name","Field Name","Tot_Assets_per_Employee"]]
    Assets_employee_ratio = [None]*len(companies)
    for i in range(0,len(companies)):
        Assets_employee_ratio[i] = func(Assets_employee[Assets_employee["Company Name"]==companies[i]],"Tot_Assets_per_Employee")
        
    dfAssets_employee= Assets_employee_ratio[0]
    for i in range(1,len(Assets_employee_ratio)):
        dfAssets_employee = pd.concat([dfAssets_employee,Assets_employee_ratio[i]])
    Ratios = pd.concat([Ratios, dfAssets_employee], axis = 1)
    
except KeyError:
    pass

#Inc Bef Taxes Margin - %
try:
    IncBef_Margin = df_ratios[["Company Name","Field Name","Inc Bef Taxes Margin - %"]]
    IncBef_Margin_ratio = [None]*len(companies)
    for i in range(0,len(companies)):
        IncBef_Margin_ratio[i] = func(IncBef_Margin[IncBef_Margin["Company Name"]==companies[i]],"Inc Bef Taxes Margin - %")
        
    dfIncBef_Margin= IncBef_Margin_ratio[0]
    for i in range(1,len(IncBef_Margin_ratio)):
        dfIncBef_Margin = pd.concat([dfIncBef_Margin,IncBef_Margin_ratio[i]])
    Ratios = pd.concat([Ratios, dfIncBef_Margin], axis = 1)
    
except KeyError:
    pass

### Paso 4b: Análisis de correlación entre variables financieras
El objetivo de este paso es conocer qué ratios son los que tienen mayor relación con el incremento del valor de mercado de una empresa.

import statsmodels
import statsmodels.formula.api as smf
from sklearn.feature_selection import RFE
from sklearn.svm import SVR
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
from statsmodels.stats.outliers_influence import variance_inflation_factor

#Limpieza de datos de los Ratios
#Primero borramos dos columnas que no necesitamos
Ratios = Ratios.drop(['Company Name', 'Field Name'], axis = 1)
Ratios = Ratios.dropna(axis = 0, how = 'all')
#Calculamos el porcentaje de valores nulos por columna, y borramos aquellas columnas con más de un 12%
total = Ratios.isnull().sum().sort_values(ascending = False)
percent = (Ratios.isnull().sum() / Ratios.isnull().count()).sort_values(ascending = False)
missing_data = pd.concat([total, percent], axis = 1, keys = ['Total', 'Percent'])
Ratios = Ratios.drop((missing_data[missing_data['Percent'] > 0.12]).index,1)

#Una vez tenemos todos los datos, analizamos la correlación de "Market Capitalization" con cada uno de ellos.
df_corr = Ratios.corr('pearson')
df_corr = df_corr['Market Capitalization']
df_corr

Agunos de estos datos no tienen mucha lógica, por lo que nos induce a pensar que las variables financieras son dependientes entre si, y por lo tanto, no se puede hacer un análisis independiente de cada uno de los ratios.

Para demostrar nuestra hipótesis, analizaremos si existe correlación entre las variables utilizando matshow.

Ratios.corr()

#Matriz de correlación entre variables
corrmat = Ratios.corr()
f, ax = plt.subplots(figsize=(12,9))
sns.heatmap(corrmat, vmax = .8, square = True)

Como podemos ver a primera vista, muchas de nuestras variables son dependientes entre si, por lo que nos encontramos con un problema de milticolinealidad.

Para solucionarlo, calcularemos el factor de inflacion de la varianza (VIF) e iremos eliminando aquellas variables que son dependientes entre si y aportan la misma información.

#Limpieza
Ratios = Ratios.dropna(axis = 1, how = 'any')
Ratios

#VIF
#Calcularemos el Factor de Inflación de Varianza para cada una de los ratios, con el fin de eliminar de nuestra ecuación
#aquellos que ofrezcan la misma información, con el objetivo de crear un modelo acertado.
def calculate_vif(Ratios):
    vif = pd.DataFrame()
    vif["Ratios"] = Ratios.columns
    vif["VIF"] = [variance_inflation_factor(Ratios.values, i) for i in range(Ratios.shape[1])]    
    return(vif)
vif = calculate_vif(Ratios)
while vif['VIF'][vif['VIF'] > 7].any():
    remove = vif.sort_values('VIF',ascending=0)['Ratios'][:1]
    Ratios.drop(remove,axis=1,inplace=True)
    vif = calculate_vif(Ratios)
vif


corr = Ratios.corr()
data = corr[['Market Capitalization']].sort_values(by = 'Market Capitalization',ascending = False)
data_corr = data["Market Capitalization"]
data_corr= data_corr.to_frame()
data_corr["Distance"] = data_corr["Market Capitalization"]
for i in range(0,len(data_corr)):
    if data_corr["Distance"][i] <0:
        data_corr["Distance"][i] = abs(data_corr["Distance"][i])

data_ = data_corr.sort_values("Distance", ascending = False)
data_ = data_.iloc[0:10]
data_

ratios = Ratios.corr()
Ratios_corr = ratios[[data_.iloc[0].name, data_.iloc[1].name, data_.iloc[2].name, data_.iloc[3].name, data_.iloc[4].name, data_.iloc[5].name, data_.iloc[6].name]]
filas = Ratios_corr.index.values
columnas = Ratios_corr.columns.values
result = [columnas for columnas in columnas if columnas in filas]
Ratios_corr[result].loc[result]

# Matriz de correlación
corrmat = Ratios_corr.corr()
k = 8 # Número de variables.
cols = corrmat.nlargest(k, 'Market Capitalization')['Market Capitalization'].index
cm = np.corrcoef(Ratios_corr[cols].values.T)
sns.set(font_scale = 1)
hm = sns.heatmap(cm, cbar = True, annot = True, square = True, fmt = '.2f', annot_kws = {'size': 12}, yticklabels = cols.values, xticklabels = cols.values)
plt.show()

Una vez que ya disponemos de aquellas variables con una mayor correlación con la varianza del valor de mercado de la empresa, nos disponemos a crear nuestro modelo.


### Paso 5: Modelo predictivo

El objetivo de este paso es crear un modelo que sea eficaz a la hora de predecir la variación en el "Market Capitalization" dados unas variaciones dadas de sus ratios financieros.
Nuestro dataset será el creado en el paso 4a, "Ratios".

from sklearn.feature_selection import RFE
from sklearn.svm import SVR
from sklearn.linear_model import LinearRegression
import statsmodels.api as svm
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

#Regresión Múltiple con Scikit - learn
data = Ratios
feature_cols = Ratios_corr.columns[1:]
X = data[feature_cols]
y = data["Market Capitalization"]

estimator = SVR(kernel ='linear')
selector = RFE(estimator, 6, step = 1)
selector= selector.fit(X,y)
selector.ranking_

lista = []
for i in range(0,len(selector.ranking_)):
    if selector.ranking_[i] == 1:
        lista.append(i)
        
X_pred = X[X.columns[lista]]

lm = LinearRegression()
lm.fit(X_pred,y)
print ( "El punto de intersección es el " + str(lm.intercept_))
print("Los coeficientes de cada una de las variables son " + str(lm.coef_))
print("La puntuación de este modelo es de " + str(lm.score(X_pred,y)))
